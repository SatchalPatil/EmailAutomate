import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import ollama  

logger = logging.getLogger(__name__)

def generate_email_content(prompt):
    """
    Generate a well-structured email content using a language model.
    Returns a tuple (subject, body, full_email_content).
    """
    structured_prompt = (
        "You are an AI email assistant. Your task is to generate a well-structured and professional email based on the user's input.\n\n"
        "Instructions:\n"
        "1. Understand the context: Analyze the user's input to determine the purpose of the email. Identify the subject, tone, and key details.\n"
        "2. Ensure proper formatting:\n"
        "   - Format the email as follows:\n"
        "     Subject: <email subject>\n"
        "     Body:\n"
        "     <email body>\n"
        "   - The subject should be clear, concise, and relevant (under 10 words).\n"
        "   - The body should be well-structured with logical flow.\n"
        "3. Adjust tone based on intent: Use formal language for professional emails and a friendly tone for casual ones.\n"
        "4. Avoid unnecessary filler: Keep the email concise and ensure the key message is clear.\n"
        "5. Ensure grammar and clarity: The email must be grammatically correct and easy to read.\n"
        "6. Personalize if possible: Use the user's provided name or any other details if mentioned.\n\n"
        "User Input:\n"
        f"{prompt}\n\n"
        "Expected Output Format:\n"
        "Subject: <email subject>\n"
        "Body:\n"
        "<email body>"
    )
    
    try:
        response = ollama.chat(model='qwen2.5:3B', messages=[{"role": "user", "content": structured_prompt}])
        email_content = response['message']['content']
        logger.info("Email content generated by LLM.")
    except Exception as e:
        logger.error(f"Error generating email content: {e}")
        return "No Subject", "Error generating email content.", ""
    
    if "Subject:" in email_content and "Body:" in email_content:
        subject = email_content.split("Subject:", 1)[1].split("Body:", 1)[0].strip()
        body = email_content.split("Body:", 1)[1].strip()
        return subject, body, email_content
    else:
        return "No Subject", email_content, email_content


def modify_email_content(original_email, suggestions):
    """
    Modify the current email content based on the user's suggestions.
    Returns a tuple (subject, body, full_email_content) of the updated email.
    """
    structured_prompt = (
        "You are an AI email assistant. The following is the current version of an email:\n\n"
        f"{original_email}\n\n"
        "The user has suggested the following changes:\n"
        f"{suggestions}\n\n"
        "Please modify the email accordingly. Maintain the same format:\n"
        "Subject: <email subject>\n"
        "Body:\n"
        "<email body>"
    )
    try:
        response = ollama.chat(model='qwen2.5:3B', messages=[{"role": "user", "content": structured_prompt}])
        new_email_content = response['message']['content']
        logger.info("Email content modified by LLM.")
    except Exception as e:
        logger.error(f"Error modifying email content: {e}")
        return "No Subject", "Error modifying email content.", original_email

    if "Subject:" in new_email_content and "Body:" in new_email_content:
        subject = new_email_content.split("Subject:", 1)[1].split("Body:", 1)[0].strip()
        body = new_email_content.split("Body:", 1)[1].strip()
        return subject, body, new_email_content
    else:
        return "No Subject", new_email_content, new_email_content


def send_email(to_email, subject, body):
    """
    Sends an email using Gmail's SMTP server.
    """

    EMAIL_ADDRESS = "autoemail22@gmail.com"
    APP_PASSWORD = "wufr haao cpmg ksaw"

    msg = MIMEMultipart()
    msg["From"] = "Happy Patil <autoemail22@gmail.com>"
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_ADDRESS, APP_PASSWORD)
            server.sendmail(EMAIL_ADDRESS, to_email, msg.as_string())
        logger.info("Email sent successfully.")
    except Exception as e:
        logger.error(f"Error sending email: {e}")
        raise


def Auto_emailing():
    """
    Orchestrates the email automation workflow with an option to suggest changes.
    """
    prompt = input("Describe the email you want to send: ")
    subject, body, full_email = generate_email_content(prompt)
    
    while True:
        # Display the generated email for user validation
        print("\nGenerated Email:")
        print(f"Subject: {subject}")
        print(f"Body:\n{body}\n")
    
        user_choice = input("Enter 'yes' to send, 'change' to suggest modifications, or 'cancel' to abort: ").strip().lower()
        
        if user_choice == 'yes':
            to_email = input("Enter recipient email: ")
            try:
                send_email(to_email, subject, body)
                print("Email sent successfully!")
            except Exception as e:
                print("Failed to send email. Please check logs for details.")
            break
        
        elif user_choice == 'change':
            suggestions = input("Please enter your suggestions for changes: ")
            subject, body, full_email = modify_email_content(full_email, suggestions)
        
        elif user_choice == 'cancel':
            print("Email sending cancelled.")
            break
        
        else:
            print("Invalid input. Please try again.")
